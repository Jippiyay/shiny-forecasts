filter(Lager == c("A")) %>%
ggplot(aes(x = Monate_num), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_continuous(limits = c(1,42),
breaks = seq(from = 1, to = max(lager_data_fore$Monate_num), by = 5)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = 40, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 41, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 42, linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
annotate("text", x = c(1, 13, 25, 37), y = 210, label = c("Jahr 1", "Jahr 2", "Jahr 3", "Jahr 4"), hjust = 0, size = 3)
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate_num), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_continuous(limits = c(1,42),
breaks = seq(from = 1, to = max(lager_data_fore$Monate_num), by = 5)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = 40, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 41, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 42, linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
facet_grid(. ~ Jahr, scale = "free_x") +
scale_x_date(labels = date_format("%b"), expand = c(0, 0)) +
theme(panel.spacing.x = unit(0, "lines"))
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = as.Date(Monate), group = 1)) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(labels = date_format("%b")) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = as.Date("1970-01-40"), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.Date("1970-01-41"), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.Date("1970-01-42"), linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
facet_grid(. ~ Jahr, scale = "free_x") +
theme(panel.spacing.x = unit(0, "lines"))
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate_num), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_continuous(limits = c(1,42),
breaks = seq(from = 1, to = max(lager_data_fore$Monate_num), by = 5)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = 40, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 41, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 42, linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
annotate("text", x = c(1, 13, 25, 37), y = 210, label = c("Jahr 1", "Jahr 2", "Jahr 3", "Jahr 4"), hjust = 0, size = 3)
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = as.Date(Monate), group = 1)) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(labels = date_format("%b")) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = as.Date("1970-01-40"), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.Date("1970-01-41"), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.Date("1970-01-42"), linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
facet_grid(~Jahr, space="free_x", scales="free_x", switch="x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=NA,colour="grey50"),
panel.spacing=unit(0,"cm"))
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = as.Date(Monate), group = 1)) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(labels = date_format("%b")) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = as.Date("1970-01-40"), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.Date("1970-01-41"), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.Date("1970-01-42"), linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
facet_grid(~Jahr, space="free_x", scales="free_x", switch="x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=NA,colour="grey50"),
panel.spacing=unit(0,"cm"))
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate, group = 1)) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(labels = date_format("%b")) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = as.Date("1970-01-40"), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.Date("1970-01-41"), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.Date("1970-01-42"), linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
facet_grid(~Jahr, space="free_x", scales="free_x", switch="x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=NA,colour="grey50"),
panel.spacing=unit(0,"cm"))
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate, group = 1)) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(labels = date_format("%b")) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = as.numeric(as.Date("2022-07-01")), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.numeric(as.Date("2022-08-01")), linetype=2,  color = "darkgrey") +
geom_vline(xintercept= as.numeric(as.Date("2022-09-01")), linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
facet_grid(~Jahr, space="free_x", scales="free_x", switch="x") +
theme(strip.placement = "outside",
strip.background = element_rect(fill=NA,colour="grey50"),
panel.spacing=unit(0,"cm"))
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate_num), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_continuous(limits = c(1,42),
breaks = seq(from = 1, to = max(lager_data_fore$Monate_num), by = 5)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = 40, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 41, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 42, linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
annotate("text", x = c(1, 13, 25, 37), y = 210, label = c("Jahr 1", "Jahr 2", "Jahr 3", "Jahr 4"), hjust = 0, size = 3)
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate_num), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_continuous(limits = c(1,42),
breaks = seq(from = 1, to = max(lager_data_fore$Monate_num), by = 5)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = 40, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 41, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 42, linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend") +
annotate("text", x = c(1, 13, 25, 37), y = 210, label = c("Jahr 1", "Jahr 2", "Jahr 3", "Jahr 4"), hjust = 0, size = 3)
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate_num), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_continuous(limits = c(1,42),
breaks = seq(from = 1, to = max(lager_data_fore$Monate_num), by = 5)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = 40, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 41, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 42, linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend")
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month", expand = c(0.05, 0, 0.05, 0)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = as.numeric(as.Date("2022-07-01")), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.numeric(as.Date("2022-08-01")), linetype=2,  color = "darkgrey") +
geom_vline(xintercept= as.numeric(as.Date("2022-09-01")), linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend")
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month", expand = c(0.05, 0, 0.05, 0)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = as.numeric(as.Date("2022-07-01")), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.numeric(as.Date("2022-08-01")), linetype=2,  color = "darkgrey") +
geom_vline(xintercept= as.numeric(as.Date("2022-09-01")), linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend")
lager_data_fore <- read_excel("SeaDrive/Meine Bibliotheken/Master/Master-Thesis/Daten/lager_beispiel_forecast.xlsx")
#View(lager_data_fore)
lager_data_fore["Monate"] <- as.Date(lager_data_fore$Monate)
start_date <- as.Date("2022-06-01")
end_date <- as.Date("2022-09-01")
fc1 = c(190, 185, 185, 180)
fc2 = c(190, 195, 200, 185)
fc3 = c(190, 180, 170, 165)
df_Fc1 = data.frame(time = seq( start_date, end_date, by = "1 month" ), fc1 , upper_bound = 1.02*M, lower_bound = 0.98 * fc1,isin = "Prognose 1")
df_Fc2 = data.frame(time = seq( start_date, end_date, by = "1 month" ), fc2 , upper_bound = 1.02*M, lower_bound = 0.98 * fc2,isin = "Prognose 2")
df_Fc3 = data.frame(time = seq( start_date, end_date, by = "1 month" ), fc3 , upper_bound = 1.02*M, lower_bound = 0.98 * fc3,isin = "Prognose 3")
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month", expand = c(0.05, 0, 0.05, 0)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = as.numeric(as.Date("2022-07-01")), linetype=2,  color = "darkgrey") +
geom_vline(xintercept = as.numeric(as.Date("2022-08-01")), linetype=2,  color = "darkgrey") +
geom_vline(xintercept= as.numeric(as.Date("2022-09-01")), linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend")
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate_num), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_continuous(limits = c(1,42),
breaks = seq(from = 1, to = max(lager_data_fore$Monate_num), by = 5)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = 40, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 41, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 42, linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend")
lager_data_fore$Monate_num <- seq.int(1, length(lager_data_fore$Monate))
View(lager_data_fore)
start_date <- 39
end_date <- 42
fc1 = c(190, 185, 185, 180)
fc2 = c(190, 195, 200, 185)
fc3 = c(190, 180, 170, 165)
df_Fc1 = data.frame(time = seq( start_date, end_date, by = 1 ), fc1 , upper_bound = 1.02*M, lower_bound = 0.98 * fc1,isin = "Prognose 1")
df_Fc2 = data.frame(time = seq( start_date, end_date, by = 1 ), fc2 , upper_bound = 1.02*M, lower_bound = 0.98 * fc2,isin = "Prognose 2")
df_Fc3 = data.frame(time = seq( start_date, end_date, by = 1 ), fc3 , upper_bound = 1.02*M, lower_bound = 0.98 * fc3,isin = "Prognose 3")
labeller_sec_x <- function(x) {
format(x / 12, digits = 0)
}
lager_data_fore %>%
filter(Lager == c("A")) %>%
ggplot(aes(x = Monate_num), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_continuous(limits = c(1,42),
breaks = seq(from = 1, to = max(lager_data_fore$Monate_num), by = 5)) +
xlab("Monate") + theme_bw() +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_color_manual(values = c("A" = "steelblue")) +
geom_vline(xintercept = 40, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 41, linetype=2,  color = "darkgrey") +
geom_vline(xintercept = 42, linetype=2,  color = "darkgrey") +
geom_smooth(aes(x=time, y=fc1), colour='blue', data=df_Fc1, stat='identity') +
geom_smooth(aes(x=time, y=fc2), colour='#E6B700', data=df_Fc2, stat='identity') +
geom_smooth(aes(x=time, y=fc3), colour='green', data=df_Fc3, stat='identity') +
scale_color_manual(name = "Forecast", values = c("fc1" = "blue", "fc2" = "#E6B700", "fc3" = "green"), labels = c("Forecast 1", "Forecast 2", "Forecast 3"),
guide = "legend")
shiny::runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
View(info)
View(edited_val)
View(clicked_vals)
View(data_mt)
View(data_mt)
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
View(clicked_vals)
View(edited_val)
View(info)
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
View(clicked_vals)
View(clicked_vals)
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
View(clicked_vals)
View(data_mt)
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
View(data_mt)
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
View(data_mt)
View(data_mt)
View(data_mt)
View(data_mt)
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
View(linecolors)
shiny::runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
View(linecolors)
observeEvent(input$submitbutton, {
clicked_vals <- subset(data_mt, clicked %in% c(TRUE))
linecolors$color <<- "darkgrey"
if(nrow(clicked_vals) < 3) {
linecolors[!linecolors$counter %in% clicked_vals$counter, "color"] <<- "red"
showNotification(duration = 5,"Unvollständige Prognose", type = "warning")
}else showNotification(duration = 5,"Prognose wurde gespeichert")
refreshPlot(input, output, vals, data_mt)
})
selected_values <- data.frame(x=c(1), y=c(1))
observeEvent(input$plot_click, {
print(input)
print(tail(data_mt$counter, n=1))
if(input$plot_click$x < 1) {
vals$x <- 1
} else if(input$plot_click$x - 2.5 > tail(data_mt_template$counter, n=1)){
selected_values[nrow(selected_values) + 1,] <- c(input$plot_click$x, input$plot_click$y)
if(input$plot_click$x < offset_tens+7.5 && input$plot_click$x > offset_tens+2.5) {
vals$x <- offset_tens + 5
if(rlang::is_empty(data_mt$visits[data_mt$counter == vals$x])) {
data_mt[nrow(data_mt) + 1,] <<- c(vals$x, visits=input$plot_click$y, clicked = TRUE)
} else {
data_mt$visits[data_mt$counter == vals$x] <<- input$plot_click$y
}
} else if(input$plot_click$x < offset_tens+12.5 && input$plot_click$x > offset_tens+7.5) {
vals$x <- offset_tens + 10
if(rlang::is_empty(data_mt$visits[data_mt$counter == vals$x])) {
data_mt[nrow(data_mt) + 1,] <<- c(vals$x, visits=input$plot_click$y, clicked = TRUE)
} else {
data_mt$visits[data_mt$counter == vals$x] <<- input$plot_click$y
}
} else if(input$plot_click$x < offset_tens+17.5 && input$plot_click$x > offset_tens+12.5) {
vals$x <- offset_tens + 15
if(rlang::is_empty(data_mt$visits[data_mt$counter == vals$x])) {
data_mt[nrow(data_mt) + 1,] <<- c(vals$x, visits=input$plot_click$y, clicked = TRUE)
} else {
data_mt$visits[data_mt$counter == vals$x] <<- input$plot_click$y
}
} else {
vals$x <- tail(data_mt_template$counter, n=1)
}
} else {
if(rlang::is_empty(data_mt$counter == input$plot_click$x)) {
vals$x <- tail(data_mt_template$counter, n=1)
} else {
vals$x <- input$plot_click$x
}
}
print(vals$x)
refreshPlot(input, output, vals, data_mt)
})
if(input$plot_click$x < offset_tens+7.5 && input$plot_click$x > offset_tens+2.5) {
vals$x <- offset_tens + 5
if(rlang::is_empty(data_mt$visits[data_mt$counter == vals$x])) {
data_mt[nrow(data_mt) + 1,] <<- c(vals$x, visits=input$plot_click$y, clicked = TRUE)
} else {
data_mt$visits[data_mt$counter == vals$x] <<- input$plot_click$y
}
} else if(input$plot_click$x < offset_tens+12.5 && input$plot_click$x > offset_tens+7.5) {
vals$x <- offset_tens + 10
if(rlang::is_empty(data_mt$visits[data_mt$counter == vals$x])) {
data_mt[nrow(data_mt) + 1,] <<- c(vals$x, visits=input$plot_click$y, clicked = TRUE)
} else {
data_mt$visits[data_mt$counter == vals$x] <<- input$plot_click$y
}
} else if(input$plot_click$x < offset_tens+17.5 && input$plot_click$x > offset_tens+12.5) {
vals$x <- offset_tens + 15
if(rlang::is_empty(data_mt$visits[data_mt$counter == vals$x])) {
data_mt[nrow(data_mt) + 1,] <<- c(vals$x, visits=input$plot_click$y, clicked = TRUE)
} else {
data_mt$visits[data_mt$counter == vals$x] <<- input$plot_click$y
}
} else {
vals$x <- tail(data_mt_template$counter, n=1)
}
unclicked_vals %>%
ggplot(aes(x=counter, y=visits)) +
geom_line(color="#05095E", data=unclicked_vals) + ylim(0,400000000) +
scale_y_continuous(name = "Visits",limits = c(0, max(data_mt$visits, na.rm = TRUE)*1.2), breaks = scales::breaks_width(25000000),labels = scales::number_format(accuracy = 1)) +
scale_x_continuous(name = "Zeit",breaks = scales::breaks_width(5), labels = scales::number_format(accuracy = 1)) +
theme_bw() +
geom_vline(xintercept = 55, linetype = "dashed", color = linecolors[1, "color"]) +
geom_vline(xintercept = 60, linetype = "dashed", color = linecolors[2, "color"]) +
geom_vline(xintercept = 65, linetype = "dashed", color = linecolors[3, "color"]) +
geom_line(data=clicked_vals, color = "#E6B700", size = 1) +
geom_point(data=data_mt[data_mt$counter == floor(vals$x), ], aes(x=counter, y=visits), colour="#000BE6", size =2.3) +
geom_point(data=clicked_vals[clicked_vals$counter != 48, ], aes(x=counter, y=visits), colour="#F2A60C")
output$plot1 <- renderPlot({
print(tail(data_mt$visits, n= 1))
unclicked_vals <- subset(data_mt, clicked %in% c(FALSE))
clicked_vals <- subset(data_mt, clicked %in% c(TRUE))
clicked_vals <- rbind(clicked_vals, unclicked_vals[nrow(unclicked_vals),])
unclicked_vals %>%
ggplot(aes(x=counter, y=visits)) +
geom_line(color="#05095E", data=unclicked_vals) + ylim(0,400000000) +
scale_y_continuous(name = "Visits",limits = c(0, max(data_mt$visits, na.rm = TRUE)*1.2), breaks = scales::breaks_width(25000000),labels = scales::number_format(accuracy = 1)) +
scale_x_continuous(name = "Zeit",breaks = scales::breaks_width(5), labels = scales::number_format(accuracy = 1)) +
theme_bw() +
geom_vline(xintercept = 55, linetype = "dashed", color = linecolors[1, "color"]) +
geom_vline(xintercept = 60, linetype = "dashed", color = linecolors[2, "color"]) +
geom_vline(xintercept = 65, linetype = "dashed", color = linecolors[3, "color"]) +
geom_line(data=clicked_vals, color = "#E6B700", size = 1) +
geom_point(data=data_mt[data_mt$counter == floor(vals$x), ], aes(x=counter, y=visits), colour="#000BE6", size =2.3) +
geom_point(data=clicked_vals[clicked_vals$counter != 48, ], aes(x=counter, y=visits), colour="#F2A60C")
})
refreshPlot <- function(input, output, vals, data_mt) {
output$table <- DT::renderDataTable({
DT::datatable(
data_mt[data_mt$clicked == TRUE, -which(names(data_mt) == "clicked")],
editable = "cell",
colnames = c('Zeit', 'Visits'),
options = list(
searching = FALSE,
lengthChange = FALSE,
bPaginate = FALSE,
info = FALSE,
language = list(
emptyTable = " Noch keine Prognose-Werte"
),
columnDefs = list(
list(targets = which(colnames(data_mt) == "visits"),
render = JS("function(data, type, row, meta) { return parseInt(Math.round(data)).toLocaleString('de-DE') }"),
editable = TRUE),
list(targets = 0, visible = FALSE)
)
)
)
})
output$info <- renderText({
paste0("Ausgewählter Punkt:\nx = ", floor(vals$x), "\ny = ", format(round(as.double(data_mt$visits[data_mt$counter == floor(vals$x)])),big.mark=".", decimal.mark = ","))
})
output$plot1 <- renderPlot({
print(tail(data_mt$visits, n= 1))
unclicked_vals <- subset(data_mt, clicked %in% c(FALSE))
clicked_vals <- subset(data_mt, clicked %in% c(TRUE))
clicked_vals <- rbind(clicked_vals, unclicked_vals[nrow(unclicked_vals),])
unclicked_vals %>%
ggplot(aes(x=counter, y=visits)) +
geom_line(color="#05095E", data=unclicked_vals) + ylim(0,400000000) +
scale_y_continuous(name = "Visits",limits = c(0, max(data_mt$visits, na.rm = TRUE)*1.2), breaks = scales::breaks_width(25000000),labels = scales::number_format(accuracy = 1)) +
scale_x_continuous(name = "Zeit",breaks = scales::breaks_width(5), labels = scales::number_format(accuracy = 1)) +
theme_bw() +
geom_vline(xintercept = 55, linetype = "dashed", color = linecolors[1, "color"]) +
geom_vline(xintercept = 60, linetype = "dashed", color = linecolors[2, "color"]) +
geom_vline(xintercept = 65, linetype = "dashed", color = linecolors[3, "color"]) +
geom_line(data=clicked_vals, color = "#E6B700", size = 1) +
geom_point(data=data_mt[data_mt$counter == floor(vals$x), ], aes(x=counter, y=visits), colour="#000BE6", size =2.3) +
geom_point(data=clicked_vals[clicked_vals$counter != 48, ], aes(x=counter, y=visits), colour="#F2A60C")
})
}
data_mt <<- data_mt_template
shiny::runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface')
