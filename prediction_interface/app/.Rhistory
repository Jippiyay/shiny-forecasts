<<<<<<< Updated upstream
shiny::runApp('master-thesis-R/zoom_double_click_ui')
runApp('master-thesis-R/prediction_interface')
runApp('master-thesis-R/prediction_interface')
runApp('master-thesis-R/prediction_interface')
runApp('master-thesis-R/prediction_interface')
shiny::runApp('master-thesis-R/zoom_double_click_ui')
runApp('master-thesis-R/prediction_interface')
runApp('master-thesis-R/prediction_interface')
runApp('master-thesis-R/prediction_interface')
runApp('master-thesis-R/prediction_interface')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
View(clicked_vals)
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
library(shiny); runApp('~/Downloads/mouseover_click_values_app.R')
runApp('~/Downloads/mouseover_click_values_app.R')
install.packages("tidyquandt")
install.packages('tidyquandt')
shiny::runApp('master-thesis-mainrepo/shiny-apps/prediction_interface/app')
install_github("Jippiyay/masterapi")
install.packages("github.com")
library(devtools)
library(masterapi)
masterapi::store()
install_github("Jippiyay/masterapi")
library(masterapi)
masterapi::store()
library(masterapi)
masterapi::store()
store()
masterapi
?masterapi
??masterapi
store("test")
store("test")
store("test")
masterapi::store("test")
remove.packages("masterapi", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
library(masterapi)
masterapi::store("test")
store("test")
library(masterapi)
masterapi::store("test")
?masterapi
?masterapi
?masterapi::store
?masterapi::store
?masterapi::track
?masterapi::track
?masterapi::store
??masterapi::store
remove.packages("masterapi", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
library(masterapi)
?masterapi::store
masterapi::store()
exit
quit()
version()
library(masterapi)
store("test")
shiny::runApp('master-thesis-mainrepo/shiny-apps/prediction_interface/app')
runApp('master-thesis-mainrepo/shiny-apps/prediction_interface/app')
runApp('master-thesis-mainrepo/shiny-apps/prediction_interface/app')
shiny::runApp('master-thesis-mainrepo/shiny-apps/prediction_interface/app')
=======
noise <- rnorm(48, mean = 0, sd = 100)
# make sure it is not under zero
noise <- ifelse(noise < 0, 0, noise)
# Repeat the pattern 5 times
seasonal <- rep(values, times = 4)
# Add noise to seasonal component
seasonal <- seasonal + noise
# Add upward trend to seasonal component
seasonal_upward <- seasonal + seq(1, 48) * 10
# Create data frame
df_up <- data.frame(time_seasonal = seq(1, 48), seasonal_upward = seasonal_upward)
# Add year labels
df_up$year <- rep(1:4, each = 12)
df_up_template <<- df_up
#df_up <<- df_up_template
# Create plot
ggplot(df_up, aes(x = time_seasonal, y = seasonal_upward)) +
geom_line() +
labs(title = "Seasonality + Upward Trend + Noise", x = "Time", y = "Value") +
scale_x_continuous(breaks = seq(1, 48, by = 1), minor_breaks=seq(from = 1, to = 48, by = 1), expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_minimal()
time <- seq(1, 48)
values <- ifelse(time < 10, time,(time-5))
# Repeat the pattern 4 times
seasonal <- rep(values, times = 4)
# Generate random noise
set.seed(123) # Set seed for reproducibility
noise <- rnorm(48, mean = 0, sd = 100)
# make sure it is not negative
noise <- ifelse(noise < 0, 0, noise)
# Add noise to seasonal component
seasonal <- seasonal + noise
# Add upward trend to seasonal component
seasonal_upward <- seasonal + seq(1, 48) * 10
# Create data frame
df_up <- data.frame(time_seasonal = seq(1, 48), seasonal_upward = seasonal_upward)
# Add year labels
df_up$year <- rep(1:4, each = 12)
df_up_template <<- df_up
# Create plot
ggplot(df_up, aes(x = time_seasonal, y = seasonal_upward)) +
geom_line() +
labs(title = "Seasonality + Upward Trend + Noise", x = "Time", y = "Value") +
scale_x_continuous(breaks = seq(1, 48, by = 1), minor_breaks=seq(from = 1, to = 48, by = 1), expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_minimal()
# Create plot
ggplot(df_up, aes(x = time_seasonal, y = seasonal_upward)) +
geom_line() +
labs(title = "Seasonality + Upward Trend + Noise", x = "Time", y = "Value") +
scale_x_continuous(breaks = seq(1, 48, by = 1), minor_breaks=seq(from = 1, to = 48, by = 1), expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_minimal()
set.seed(123)
n <- 48 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
y <- 10 + 2*x + sin(2*pi*x/12) + sin(4*pi*x/12) + sin(6*pi*x/12) + sin(8*pi*x/12) + rnorm(n, 0, 1)
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend")
# Add the seasonal components to the plot
lines(x, 10 + sin(2*pi*x/12), col="red") # 1st seasonal component
lines(x, sin(4*pi*x/12), col="blue") # 2nd seasonal component
lines(x, sin(6*pi*x/12), col="green") # 3rd seasonal component
lines(x, sin(8*pi*x/12), col="purple") # 4th seasonal component
# Add the linear trend to the plot
lines(x, 10 + 2*x, col="black")
set.seed(123)
n <- 48 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
y <- 10 + 2*x + sin(2*pi*x/12) + sin(4*pi*x/12) + sin(6*pi*x/12) + sin(8*pi*x/12) + rnorm(n, 0, 1)
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend")
# Add the seasonal components to the plot
lines(x, 10 + sin(2*pi*x/12), col="red") # 1st seasonal component
lines(x, sin(4*pi*x/12), col="blue") # 2nd seasonal component
lines(x, sin(6*pi*x/12), col="green") # 3rd seasonal component
lines(x, sin(8*pi*x/12), col="purple") # 4th seasonal component
set.seed(123)
n <- 48 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp1 <- 3 # Amplitude of 1st seasonal component
amp2 <- 2 # Amplitude of 2nd seasonal component
amp3 <- 1.5 # Amplitude of 3rd seasonal component
amp4 <- 1 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/12)
y_season2 <- amp2 * sin(4*pi*x/12)
y_season3 <- amp3 * sin(6*pi*x/12)
y_season4 <- amp4 * sin(8*pi*x/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 10 + 2*x # Linear trend
y_noise <- rnorm(n, 0, 1) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Add the seasonal components to the plot
lines(x, y_season1, col="red") # 1st seasonal component
lines(x, y_season2, col="blue") # 2nd seasonal component
lines(x, y_season3, col="green") # 3rd seasonal component
lines(x, y_season4, col="purple") # 4th seasonal component
# Add the linear trend to the plot
lines(x, y_trend, col="black")
y_season1 <- amp1 * sin(2*pi*x/120)
set.seed(123)
n <- 48 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp1 <- 3 # Amplitude of 1st seasonal component
amp2 <- 2 # Amplitude of 2nd seasonal component
amp3 <- 1.5 # Amplitude of 3rd seasonal component
amp4 <- 1 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/120)
y_season2 <- amp2 * sin(4*pi*x/12)
y_season3 <- amp3 * sin(6*pi*x/12)
y_season4 <- amp4 * sin(8*pi*x/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 10 + 2*x # Linear trend
y_noise <- rnorm(n, 0, 1) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Add the seasonal components to the plot
lines(x, y_season1, col="red") # 1st seasonal component
lines(x, y_season2, col="blue") # 2nd seasonal component
lines(x, y_season3, col="green") # 3rd seasonal component
lines(x, y_season4, col="purple") # 4th seasonal component
# Add the linear trend to the plot
lines(x, y_trend, col="black")
amp1 <- 30# Amplitude of 1st seasonal component
amp2 <- 2 # Amplitude of 2nd seasonal component
amp3 <- 1.5 # Amplitude of 3rd seasonal component
amp4 <- 1 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/12)
y_season2 <- amp2 * sin(4*pi*x/12)
y_season3 <- amp3 * sin(6*pi*x/12)
y_season4 <- amp4 * sin(8*pi*x/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 10 + 2*x # Linear trend
y_noise <- rnorm(n, 0, 1) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Add the seasonal components to the plot
lines(x, y_season1, col="red") # 1st seasonal component
lines(x, y_season2, col="blue") # 2nd seasonal component
lines(x, y_season3, col="green") # 3rd seasonal component
lines(x, y_season4, col="purple") # 4th seasonal component
# Add the linear trend to the plot
lines(x, y_trend, col="black")
set.seed(123)
n <- 48 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp1 <- 30 # Amplitude of 1st seasonal component
amp2 <- 2 # Amplitude of 2nd seasonal component
amp3 <- 1.5 # Amplitude of 3rd seasonal component
amp4 <- 1 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/12)
y_season2 <- amp2 * sin(4*pi*x/12)
y_season3 <- amp3 * sin(6*pi*x/12)
y_season4 <- amp4 * sin(8*pi*x/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 10 + 2*x # Linear trend
y_noise <- rnorm(n, 0, 1) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Add the seasonal components to the plot
lines(x, y_season1, col="red") # 1st seasonal component
lines(x, y_season2, col="blue") # 2nd seasonal component
lines(x, y_season3, col="green") # 3rd seasonal component
lines(x, y_season4, col="purple") # 4th seasonal component
# Add the linear trend to the plot
lines(x, y_trend, col="black")
# Define the seasonal components with greater variance
amp1 <- 30 # Amplitude of 1st seasonal component
amp2 <- 2 # Amplitude of 2nd seasonal component
amp3 <- 1.5 # Amplitude of 3rd seasonal component
amp4 <- 1 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/12)
y_season2 <- amp2 * sin(4*pi*x/12)
y_season3 <- amp3 * sin(6*pi*x/12)
y_season4 <- amp4 * sin(8*pi*x/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 10 + 2*x # Linear trend
y_noise <- rnorm(n, 0, 1) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Add the seasonal components to the plot
lines(x, y_season1, col="red") # 1st seasonal component
lines(x, y_season2, col="blue") # 2nd seasonal component
lines(x, y_season3, col="green") # 3rd seasonal component
lines(x, y_season4, col="purple") # 4th seasonal component
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_trend <- 1000 + 2*x # Linear trend
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y <- y_trend + y_seasonal + y_noise
y_noise <- rnorm(n, 0, 1) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 0, 100) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 0, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 0, 8) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 5, 8) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 8, 8) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 10, 8) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 100, 8) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 1000, 8) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
n <- 96 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp1 <- 30 # Amplitude of 1st seasonal component
amp2 <- 2 # Amplitude of 2nd seasonal component
amp3 <- 1.5 # Amplitude of 3rd seasonal component
amp4 <- 1 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/12)
y_season2 <- amp2 * sin(4*pi*x/12)
y_season3 <- amp3 * sin(6*pi*x/12)
y_season4 <- amp4 * sin(8*pi*x/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 8) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_season1 <- amp1 * sin(2*pi*x/24)
y_season2 <- amp2 * sin(4*pi*x/24)
y_season3 <- amp3 * sin(6*pi*x/24)
y_season4 <- amp4 * sin(8*pi*x/24)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 8) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
# First, let's create the data
set.seed(123)
n <- 96 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp1 <- 30 # Amplitude of 1st seasonal component
amp2 <- 2 # Amplitude of 2nd seasonal component
amp3 <- 1.5 # Amplitude of 3rd seasonal component
amp4 <- 1 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/24)
y_season2 <- amp2 * sin(4*pi*x/24)
y_season3 <- amp3 * sin(6*pi*x/24)
y_season4 <- amp4 * sin(8*pi*x/24)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Add the seasonal components to the plot
lines(x, y_season1, col="red") # 1st seasonal component
lines(x, y_season2, col="blue") # 2nd seasonal component
lines(x, y_season3, col="green") # 3rd seasonal component
lines(x, y_season4, col="purple") # 4th seasonal component
amp1 <- 30 # Amplitude of 1st seasonal component
amp2 <- 30 # Amplitude of 2nd seasonal component
amp3 <- 30 # Amplitude of 3rd seasonal component
amp4 <- 30 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/24)
y_season2 <- amp2 * sin(4*pi*x/24)
y_season3 <- amp3 * sin(6*pi*x/24)
y_season4 <- amp4 * sin(8*pi*x/24)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Define the seasonal components with greater variance
amp1 <- 30 # Amplitude of 1st seasonal component
amp2 <- 2 # Amplitude of 2nd seasonal component
amp3 <- 1.5 # Amplitude of 3rd seasonal component
amp4 <- 1 # Amplitude of 4th seasonal component
y_season1 <- amp1 * sin(2*pi*x/24)
y_season2 <- amp2 * sin(4*pi*x/24)
y_season3 <- amp3 * sin(6*pi*x/24)
y_season4 <- amp4 * sin(8*pi*x/24)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_season1 <- amp[1] * sin(2*pi*x/24)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,3) # Amplitude of 1st seasonal component
y_season1 <- amp[1] * sin(2*pi*x/24)
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_season1 <- amp[1] * sin(2*pi*x/24)
y_season2 <- amp[2] * sin(4*pi*x/24)
y_season3 <- amp[3] * sin(6*pi*x/24)
y_season4 <- amp[4] * sin(8*pi*x/24)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_trend <- 1000 + 3*x # Linear trend
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_trend <- 1000 + 5*x # Linear trend
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Create data frame
df_up <- data.frame(time_seasonal = seq(0, 95), seasonal_upward = y)
# Add year labels
df_up$year <- rep(1:4, each = 12)
df_up_template <<- df_up
plot(fd_up)
plot(df_up)
# Create data frame
df_up <- data.frame(time_seasonal = seq(0, 95), seasonal_upward = y)
plot(df_up)
set.seed(123)
n <- 96 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,3) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*x/24)
y_season2 <- amp[2] * sin(4*pi*x/24)
y_season3 <- amp[3] * sin(6*pi*x/24)
y_season4 <- amp[4] * sin(8*pi*x/24)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
set.seed(123)
n <- 48 # Maximum number of data points
x <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,3) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*x/12)
y_season2 <- amp[2] * sin(4*pi*x/12)
y_season3 <- amp[3] * sin(6*pi*x/12)
y_season4 <- amp[4] * sin(8*pi*x/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_trend <- 1000 + 2*x # Linear trend
y_noise <- rnorm(n, 1000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
# Create data frame
df_up <- data.frame(time_seasonal = seq(0, 47), seasonal_upward = y)
# Add year labels
df_up$year <- rep(1:4, each = 12)
df_up_template <<- df_up
plot(df_up)
# Create data frame
df_up <- data.frame(time_seasonal = seq(0, 47), seasonal_upward = y)
plot(df_up)
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
y_noise <- rnorm(n, 10000, 10) # Noise
y <- y_trend + y_seasonal + y_noise
# Now let's plot the data
plot(x, y, type="l", xlab="Time", ylab="Data", main="Additive Seasonal Data with Linear Trend and Greater Variance")
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
y
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
View(df_up_template)
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface/app')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface/app')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_upwards')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
View(clickssubmit)
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_downwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_steady')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_increasing_right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_constant_right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_constant_left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_constant_right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_decreasing_left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_increasing_left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface_seasonal_data_increasing_left')
devtools::install_github("Jippiyay/masterapi")
install.packages("devtools")
devtools::install_github("Jippiyay/masterapi")
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface/app')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface/app')
?masterapi
??masterapi
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction_interface/app')
>>>>>>> Stashed changes
