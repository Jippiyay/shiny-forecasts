#                    values = c("Prognose 1" = 0, "Prognose 2" = 1, "Prognose 3" = 2)) +
scale_color_manual(name = "Prognosen",
values = c('#878787', 'blue', '#E6B700', 'green'),
labels = c("Lager", "Prognose 1", "Prognose 2", "Prognose 3")) +
scale_shape_discrete(name = "color")
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt von C und D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt von C und D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt von C und D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt von C und D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt C und D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt von C & D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "DurchschnittCundD"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "DurchschnittCundD"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# three warehouses with average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "DurchschnittCundD"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# forecast plot for warehouse A
lager_data_fore <- read_excel("SeaDrive/Meine Bibliotheken/Master/Master-Thesis/Daten/lager_beispiel_forecast.xlsx")
lager_data["Monate"] <- as.Date(lager_data$Monate)
View(lager_data)
lager_data <- read_excel("SeaDrive/Meine Bibliotheken/Master/Master-Thesis/Daten/lager_beispiel.xlsx")
View(lager_data)
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt C und D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt C und D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
lager_data["Monate"] <- as.Date(lager_data$Monate)
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt C und D"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
lager_data <- read_excel("SeaDrive/Meine Bibliotheken/Master/Master-Thesis/Daten/lager_beispiel.xlsx")
View(lager_data)
lager_data["Monate"] <- as.Date(lager_data$Monate)
# all three line for Lager A, B and average
ggplot(lager_data, aes(x = Monate), group = 1) +
geom_line(aes(y = Kartonanzahl, colour = Lager, linetype = Lager %in% c("A","B"))) +
xlab("Monate") + theme_bw() +
scale_linetype_manual(values = c("TRUE" = "solid", "FALSE" = "dashed")) +
guides(linetype = FALSE) +
geom_point(aes(y = Kartonanzahl, colour = Lager)) +
scale_x_date(date_labels = "%b %y", date_minor_breaks = "1 month", date_breaks = "1 month") +
scale_color_manual(values = c("A" = "steelblue","B" = "orange", "Durchschnitt"= "purple")) +
scale_y_continuous(name = "Kartonanzahl", expand = c(2, -80))
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-right')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-right')
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
install.packages(masterapi)
install.packages("masterapi")
githubinstall("masterapi")
install_github("jippiyay/masterapi")
library(devtools)
library(devtools)
install_github("hadley/dplyr")
install.packages("devtools")
install_github("Jippiyay/masterapi")
library(devtools)
install_github("Jippiyay/masterapi")
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('SeaDrive/Meine Bibliotheken/Master/Master-Thesis/R-Dateien/prediction_interface_seasonal_data_upwards')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
y_season4 <- amp[5] * sin(12*pi*time/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_season5 <- amp[5] * sin(12*pi*time/12)
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
y_season5 <- amp[5] * sin(12*pi*time/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_steady <-  y_seasonal + y_noise
# Create data frame
df_up <- data.frame(time_seasonal = seq(1, 60), seasonal_steady = seasonal_steady)
# Add year labels
df_up$year <- rep(1:5, each = 12)
df_up_template <<- df_up
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
y_season5 <- amp[5] * sin(12*pi*time/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_steady <-  y_seasonal + y_noise
# Create data frame
df_up <- data.frame(time_seasonal = seq(1, 60), seasonal_steady = seasonal_steady)
# Add year labels
df_up$year <- rep(1:5, each = 12)
df_up_template <<- df_up
print(df_up)
set.seed(123)
n <- 48 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_steady <-  y_seasonal + y_noise
# Create data frame
df_up <- data.frame(time_seasonal = seq(1, 48), seasonal_steady = seasonal_steady)
# Add year labels
df_up$year <- rep(1:4, each = 12)
df_up_template <<- df_up
print(df_up)
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
y_season5 <- amp[5] * sin(12*pi*time/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_steady <-  y_seasonal + y_noise
# Create data frame
df_up <- data.frame(time_seasonal = seq(1, 60), seasonal_steady = seasonal_steady)
# Add year labels
df_up$year <- rep(1:5, each = 12)
df_up_template <<- df_up
print(df_up)
print(y_season1)
y_season5 <- amp[5] * sin(12*pi*time/12)
print(y_season5)
y_season5 <- amp[5] * sin(12*pi*time/11)
print(y_season5)
print(y_season4)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20,1) # Amplitude of seasonal components
print(y_season5)
y_season5 <- amp[5] * sin(12*pi*time/12)
print(y_season5)
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-right')
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,3,1) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
y_season5 <- amp[5] * sin(12*pi*time/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_trend <- 1000 - 2*time # Linear trend
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_downward <- y_trend + y_seasonal + y_noise
print(seasonal_downward)
# Create data frame
df_up <- data.frame(time_seasonal = seq(1, n), seasonal_downward = seasonal_downward)
# Add year labels
df_up$year <- rep(1:5, each = 12)
df_up_template <<- df_up
print(df_up)
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20,1) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
print(y_season1)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
print(y_season4)
y_season5 <- amp[5] * sin(12*pi*time/12)
print(y_season5)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_steady <-  y_seasonal + y_noise
# Create data frame
df_up_co <- data.frame(time_seasonal = seq(1, 60), seasonal_steady = seasonal_steady)
# Add year labels
df_up_co$year <- rep(1:5, each = 12)
print(df_up_co)
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20,1) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
print(y_season1)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
print(y_season4)
y_season5 <- amp[5] * sin(12*pi*time/12)
print(y_season5)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_steady <-  y_seasonal + y_noise
# Create data frame
df_co <- data.frame(time_seasonal = seq(1, 60), seasonal_steady = seasonal_steady)
# Add year labels
df_co$year <- rep(1:5, each = 12)
print(df_co)
write.csv(df_co, "r'/home/johanna/SeaDrive/Meine Bibliotheken/Master/Master-Thesis/Auswertungen/constant_data_5_seasons.csv'", row.names=FALSE)
write.csv(df_co, "/home/johanna/SeaDrive/Meine Bibliotheken/Master/Master-Thesis/Auswertungen/constant_data_5_seasons.csv'", row.names=FALSE)
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,3,1) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
y_season5 <- amp[5] * sin(12*pi*time/12)
y_season5 <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_trend <- 1000 + 2*time # Linear trend
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_upward <- y_trend + y_seasonal + y_noise
# Create data frame
df_up <- data.frame(time_seasonal = seq(1, n), seasonal_upward = seasonal_upward)
# Add year labels
df_up$year <- rep(1:5, each = 12)
write.csv(df_up, "/home/johanna/SeaDrive/Meine Bibliotheken/Master/Master-Thesis/Auswertungen/increasing_data_5_seasons.csv'", row.names=FALSE)
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,3,1) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
y_season5 <- amp[5] * sin(12*pi*time/12)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_trend <- 1000 - 2*time # Linear trend
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_downward <- y_trend + y_seasonal + y_noise
print(seasonal_downward)
# Create data frame
df_de <- data.frame(time_seasonal = seq(1, n), seasonal_downward = seasonal_downward)
# Add year labels
df_de$year <- rep(1:5, each = 12)
print(df_de)
write.csv(df_de, "/home/johanna/SeaDrive/Meine Bibliotheken/Master/Master-Thesis/Auswertungen/decreasing_data_5_seasons.csv'", row.names=FALSE)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
set.seed(123)
n <- 60 # Maximum number of data points
time <- seq(1, n) # Independent variable (time)
# Define the seasonal components with greater variance
amp <- c(30, 2, 1.5,20,1) # Amplitude of seasonal components
y_season1 <- amp[1] * sin(2*pi*time/12)
print(y_season1)
y_season2 <- amp[2] * sin(4*pi*time/12)
y_season3 <- amp[3] * sin(6*pi*time/12)
y_season4 <- amp[4] * sin(8*pi*time/12)
print(y_season4)
y_season5 <- amp[5] * sin(12*pi*time/12)
print(y_season5)
y_seasonal <- y_season1 + y_season2 + y_season3 + y_season4 + y_season5
y_noise <- rnorm(n, 10000, 10) # Noise
seasonal_steady <-  y_seasonal + y_noise
plot(y_seasonal)
plot(y_seasonal, type = 'l')
y_seasonal4 <- y_season1 + y_season2 + y_season3 + y_season4
lines(y_seasonal4, col)
lines(y_seasonal4, col = 'red')
print(y_season4)
shiny::runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-decreasing-left')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-constant-right')
runApp('workspace/master-thesis-mainrepo/shiny-apps/prediction-interface-seasonal-data-increasing-right')
